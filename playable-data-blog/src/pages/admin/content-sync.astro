---
import AdminLayout from '../../layouts/AdminLayout.astro';
import { getArticles } from '../../utils/supabase';
import { listContent } from '../../utils/storage';

export const prerender = true;

// Get content from both sources
let contentFiles = [];
let dbArticles = [];
let storageItems = [];
let error = null;

try {
  // Get database articles
  dbArticles = await getArticles();
  
  // Get storage items
  try {
    storageItems = await listContent();
  } catch (e) {
    console.log('Storage not initialized yet:', e);
    storageItems = [];
  }
} catch (e) {
  console.error('Error fetching content:', e);
  error = e.message || 'Failed to load content';
  dbArticles = [];
}

// Create a mapping of all content
const contentMapping = {};

// Add database articles
dbArticles.forEach(article => {
  const slug = article.slug;
  
  if (!contentMapping[slug]) {
    contentMapping[slug] = {
      slug,
      title: article.title,
      sources: []
    };
  }
  
  contentMapping[slug].sources.push('database');
});

// Add storage items
if (storageItems && storageItems.length > 0) {
  storageItems.forEach(item => {
    // Extract slug from filename (remove .md extension)
    const slug = item.name.replace(/\.md$/, '');
    
    if (!contentMapping[slug]) {
      contentMapping[slug] = {
        slug,
        title: slug, // We don't have the title without downloading the file
        sources: []
      };
    }
    
    contentMapping[slug].sources.push('storage');
  });
}

// Convert to array for display
const contentItems = Object.values(contentMapping);
---

<AdminLayout title="Content Synchronization" prerender={true}>
  <div class="flex justify-between items-center mb-6">
    <h2 class="text-xl font-bold">Content Synchronization</h2>
    <div class="flex space-x-2">
      <button id="refresh-btn" class="btn btn-secondary">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
        </svg>
        Refresh
      </button>
      <button id="migrate-all-btn" class="btn btn-primary">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7h12m0 0l-4-4m4 4l-4 4m0 6H4m0 0l4 4m-4-4l4-4" />
        </svg>
        Migrate All to Storage
      </button>
    </div>
  </div>
  
  {error && (
    <div class="alert alert-danger mb-6">
      {error}
    </div>
  )}
  
  <div class="card mb-6">
    <div class="card-header">
      <h3 class="text-lg font-semibold">Content Storage Migration</h3>
    </div>
    <div class="card-body">
      <p class="mb-4">
        This tool helps you migrate your content between different storage systems:
      </p>
      <ul class="list-disc pl-5 mb-4 space-y-2">
        <li><strong>Database:</strong> Content stored in the Supabase database</li>
        <li><strong>Storage:</strong> Content stored in Supabase Storage (recommended for production)</li>
      </ul>
      <p class="mb-4">
        Migrating to Supabase Storage provides several benefits:
      </p>
      <ul class="list-disc pl-5 mb-4 space-y-2">
        <li><strong>Scalability:</strong> Store unlimited content without worrying about repository size limits</li>
        <li><strong>Reliability:</strong> Content is backed up and redundantly stored</li>
        <li><strong>Accessibility:</strong> Content can be accessed from anywhere, not just from the codebase</li>
        <li><strong>Versioning:</strong> Track changes to content over time</li>
        <li><strong>Permissions:</strong> Control who can access and modify content</li>
      </ul>
      <div class="bg-blue-50 p-4 rounded-lg border border-blue-200 mb-4">
        <h4 class="font-semibold text-blue-800 mb-2">Migration Process</h4>
        <p class="text-blue-700">
          When you migrate content to storage, the original content remains untouched. The storage system becomes the new source of truth for your content.
        </p>
      </div>
      
      <div class="bg-yellow-50 p-4 rounded-lg border border-yellow-200">
        <h4 class="font-semibold text-yellow-800 mb-2">Development Mode</h4>
        <p class="text-yellow-700">
          You're currently running in development mode without Supabase credentials. The system will simulate storage operations for demonstration purposes.
        </p>
        <p class="text-yellow-700 mt-2">
          To enable full functionality, set up your Supabase project and add the credentials to your environment variables.
        </p>
      </div>
    </div>
  </div>
  
  <div class="card">
    <div class="card-header">
      <div class="flex justify-between items-center">
        <h3 class="text-lg font-semibold">Content Inventory</h3>
        <div class="flex items-center space-x-2">
          <input type="text" id="search-input" placeholder="Search content..." class="form-input w-64" />
        </div>
      </div>
    </div>
    
    <div class="overflow-x-auto">
      <table class="table">
        <thead>
          <tr>
            <th>Title / Slug</th>
            <th>Database</th>
            <th>Storage</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {contentItems.length > 0 ? (
            contentItems.map(item => (
              <tr class="content-item" data-slug={item.slug}>
                <td>
                  <div class="font-medium">{item.title}</div>
                  <div class="text-sm text-gray-500">{item.slug}</div>
                </td>
                <td>
                  {item.sources.includes('database') ? (
                    <span class="badge badge-green">✓</span>
                  ) : (
                    <span class="badge badge-gray">—</span>
                  )}
                </td>
                <td>
                  {item.sources.includes('storage') ? (
                    <span class="badge badge-green">✓</span>
                  ) : (
                    <span class="badge badge-gray">—</span>
                  )}
                </td>
                <td>
                  <div class="flex space-x-2">
                    <button 
                      class="text-blue-500 hover:text-blue-600 migrate-btn" 
                      data-slug={item.slug}
                      disabled={item.sources.includes('storage')}
                    >
                      Migrate to Storage
                    </button>
                    <a 
                      href={`/blog/${item.slug}`} 
                      target="_blank" 
                      class="text-gray-500 hover:text-gray-700"
                    >
                      View
                    </a>
                  </div>
                </td>
              </tr>
            ))
          ) : (
            <tr>
              <td colspan="4" class="text-center py-4 text-gray-500">No content found</td>
            </tr>
          )}
        </tbody>
      </table>
    </div>
  </div>
  
  <!-- Migration progress modal -->
  <div id="migration-modal" class="fixed inset-0 z-50 hidden">
    <div class="fixed inset-0 bg-black bg-opacity-50"></div>
    <div class="relative z-10 flex items-center justify-center min-h-screen p-4">
      <div class="bg-white rounded-lg shadow-xl max-w-md w-full p-6">
        <h3 class="text-lg font-bold mb-4">Migration in Progress</h3>
        <div class="mb-4">
          <div class="w-full bg-gray-200 rounded-full h-2.5">
            <div id="progress-bar" class="bg-blue-600 h-2.5 rounded-full" style="width: 0%"></div>
          </div>
          <p id="progress-text" class="text-sm text-gray-500 mt-2">Preparing migration...</p>
        </div>
        <div id="migration-results" class="max-h-60 overflow-y-auto mb-4 hidden">
          <h4 class="font-semibold mb-2">Results:</h4>
          <ul id="results-list" class="text-sm space-y-1"></ul>
        </div>
        <div class="flex justify-end">
          <button id="close-modal" class="btn btn-primary hidden">Close</button>
        </div>
      </div>
    </div>
  </div>
  
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      // Search functionality
      const searchInput = document.getElementById('search-input');
      const contentItems = document.querySelectorAll('.content-item');
      
      if (searchInput) {
        searchInput.addEventListener('input', () => {
          const searchTerm = searchInput.value.toLowerCase();
          
          contentItems.forEach(item => {
            const title = item.querySelector('div.font-medium').textContent.toLowerCase();
            const slug = item.querySelector('div.text-sm').textContent.toLowerCase();
            
            if (title.includes(searchTerm) || slug.includes(searchTerm)) {
              item.style.display = '';
            } else {
              item.style.display = 'none';
            }
          });
        });
      }
      
      // Refresh button
      const refreshBtn = document.getElementById('refresh-btn');
      if (refreshBtn) {
        refreshBtn.addEventListener('click', () => {
          window.location.reload();
        });
      }
      
      // Migration modal elements
      const migrationModal = document.getElementById('migration-modal');
      const progressBar = document.getElementById('progress-bar');
      const progressText = document.getElementById('progress-text');
      const migrationResults = document.getElementById('migration-results');
      const resultsList = document.getElementById('results-list');
      const closeModal = document.getElementById('close-modal');
      
      // Close modal
      if (closeModal && migrationModal) {
        closeModal.addEventListener('click', () => {
          migrationModal.classList.add('hidden');
          window.location.reload();
        });
      }
      
      // Migrate single item
      const migrateBtns = document.querySelectorAll('.migrate-btn');
      migrateBtns.forEach(button => {
        button.addEventListener('click', async () => {
          const slug = button.dataset.slug;
          button.disabled = true;
          
          try {
            // Show migration modal
            if (migrationModal) {
              migrationModal.classList.remove('hidden');
              progressBar.style.width = '50%';
              progressText.textContent = `Migrating ${slug} to storage...`;
            }
            
            // Call API to migrate content
            const response = await fetch(`/api/storage/migrate/${slug}`, {
              method: 'POST'
            });
            
            if (response.ok) {
              const data = await response.json();
              
              // Update progress
              progressBar.style.width = '100%';
              progressText.textContent = `Migration complete!`;
              
              // Show results
              migrationResults.classList.remove('hidden');
              resultsList.innerHTML = `
                <li class="text-green-600">✓ ${slug} migrated successfully</li>
              `;
              
              // Show close button
              closeModal.classList.remove('hidden');
            } else {
              const data = await response.json();
              
              // Update progress
              progressBar.style.width = '100%';
              progressText.textContent = `Migration failed!`;
              
              // Show results
              migrationResults.classList.remove('hidden');
              resultsList.innerHTML = `
                <li class="text-red-600">✗ ${slug}: ${data.message || 'Unknown error'}</li>
              `;
              
              // Show close button
              closeModal.classList.remove('hidden');
            }
          } catch (error) {
            console.error('Error migrating content:', error);
            
            // Update progress
            progressBar.style.width = '100%';
            progressText.textContent = `Migration failed!`;
            
            // Show results
            migrationResults.classList.remove('hidden');
            resultsList.innerHTML = `
              <li class="text-red-600">✗ ${slug}: ${error.message || 'Unknown error'}</li>
            `;
            
            // Show close button
            closeModal.classList.remove('hidden');
          } finally {
            button.disabled = false;
          }
        });
      });
      
      // Migrate all button
      const migrateAllBtn = document.getElementById('migrate-all-btn');
      if (migrateAllBtn) {
        migrateAllBtn.addEventListener('click', async () => {
          migrateAllBtn.disabled = true;
          
          try {
            // Show migration modal
            if (migrationModal) {
              migrationModal.classList.remove('hidden');
              progressBar.style.width = '10%';
              progressText.textContent = 'Preparing to migrate all content...';
            }
            
            // Call API to migrate all content
            const response = await fetch('/api/storage/migrate-all', {
              method: 'POST'
            });
            
            if (response.ok) {
              const data = await response.json();
              
              // Update progress
              progressBar.style.width = '100%';
              progressText.textContent = `Migration complete! ${data.results.filter(r => r.status === 'success').length} items migrated.`;
              
              // Show results
              migrationResults.classList.remove('hidden');
              resultsList.innerHTML = data.results.map(result => {
                if (result.status === 'success') {
                  return `<li class="text-green-600">✓ ${result.slug} migrated successfully</li>`;
                } else {
                  return `<li class="text-red-600">✗ ${result.slug}: ${result.message}</li>`;
                }
              }).join('');
              
              // Show close button
              closeModal.classList.remove('hidden');
            } else {
              const data = await response.json();
              
              // Update progress
              progressBar.style.width = '100%';
              progressText.textContent = `Migration failed!`;
              
              // Show results
              migrationResults.classList.remove('hidden');
              resultsList.innerHTML = `
                <li class="text-red-600">✗ Error: ${data.message || 'Unknown error'}</li>
              `;
              
              // Show close button
              closeModal.classList.remove('hidden');
            }
          } catch (error) {
            console.error('Error migrating all content:', error);
            
            // Update progress
            progressBar.style.width = '100%';
            progressText.textContent = `Migration failed!`;
            
            // Show results
            migrationResults.classList.remove('hidden');
            resultsList.innerHTML = `
              <li class="text-red-600">✗ Error: ${error.message || 'Unknown error'}</li>
            `;
            
            // Show close button
            closeModal.classList.remove('hidden');
          } finally {
            migrateAllBtn.disabled = false;
          }
        });
      }
    });
  </script>
  
  <style>
    .badge {
      @apply inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium;
    }
    
    .badge-green {
      @apply bg-green-100 text-green-800;
    }
    
    .badge-gray {
      @apply bg-gray-100 text-gray-800;
    }
    
    .badge-blue {
      @apply bg-blue-100 text-blue-800;
    }
    
    .badge-yellow {
      @apply bg-yellow-100 text-yellow-800;
    }
    
    .badge-red {
      @apply bg-red-100 text-red-800;
    }
    
    button:disabled {
      @apply opacity-50 cursor-not-allowed;
    }
  </style>
</AdminLayout>