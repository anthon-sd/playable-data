---
import AdminLayout from '../../../layouts/AdminLayout.astro';
import { getArticles } from '../../../utils/supabase';

export const prerender = true;

// Get all articles
let articles = [];
let error = null;

try {
  articles = await getArticles();
} catch (e) {
  console.error('Error fetching articles:', e);
  error = e.message || 'Failed to load articles';
  articles = [];
}

// Filter and sort functionality
const statusFilter = Astro.url.searchParams.get('status') || 'all';
const sortBy = Astro.url.searchParams.get('sort') || 'newest';

// Apply filters
if (statusFilter !== 'all') {
  articles = articles.filter(article => article.status === statusFilter);
}

// Apply sorting
if (sortBy === 'newest') {
  articles.sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime());
} else if (sortBy === 'oldest') {
  articles.sort((a, b) => new Date(a.created_at).getTime() - new Date(b.created_at).getTime());
} else if (sortBy === 'title') {
  articles.sort((a, b) => a.title.localeCompare(b.title));
}
---

<AdminLayout title="Articles" prerender={true}>
  <div class="flex justify-between items-center mb-6">
    <h2 class="text-xl font-bold">Manage Articles</h2>
    <a href="/admin/articles/new" class="btn btn-primary">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
      </svg>
      New Article
    </a>
  </div>
  
  {error && (
    <div class="alert alert-danger mb-6">
      {error}
    </div>
  )}
  
  <div class="card">
    <div class="card-header">
      <div class="flex flex-col sm:flex-row sm:justify-between sm:items-center space-y-4 sm:space-y-0">
        <h3 class="text-lg font-semibold">All Articles</h3>
        
        <div class="flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-2">
          <select id="status-filter" class="form-select">
            <option value="all" selected={statusFilter === 'all'}>All Status</option>
            <option value="published" selected={statusFilter === 'published'}>Published</option>
            <option value="draft" selected={statusFilter === 'draft'}>Draft</option>
          </select>
          
          <select id="sort-by" class="form-select">
            <option value="newest" selected={sortBy === 'newest'}>Newest First</option>
            <option value="oldest" selected={sortBy === 'oldest'}>Oldest First</option>
            <option value="title" selected={sortBy === 'title'}>Title A-Z</option>
          </select>
          
          <button id="apply-filters" class="btn btn-secondary">Apply</button>
        </div>
      </div>
    </div>
    
    <div class="overflow-x-auto">
      <table class="table">
        <thead>
          <tr>
            <th>Title</th>
            <th>Status</th>
            <th>Author</th>
            <th>Date</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {articles.length > 0 ? (
            articles.map(article => (
              <tr>
                <td class="font-medium">{article.title}</td>
                <td>
                  <span class={`badge ${article.status === 'published' ? 'badge-green' : 'badge-yellow'}`}>
                    {article.status === 'published' ? 'Published' : 'Draft'}
                  </span>
                </td>
                <td>{article.author_name || 'Unknown'}</td>
                <td>{new Date(article.created_at).toLocaleDateString()}</td>
                <td>
                  <div class="flex space-x-2">
                    <a href={`/admin/articles/edit/${article.id}`} class="text-blue-500 hover:text-blue-600">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                      </svg>
                    </a>
                    <a href={`/blog/${article.slug}`} target="_blank" class="text-gray-500 hover:text-gray-700">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                      </svg>
                    </a>
                    <button class="delete-article text-red-500 hover:text-red-600" data-id={article.id}>
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                      </svg>
                    </button>
                  </div>
                </td>
              </tr>
            ))
          ) : (
            <tr>
              <td colspan="5" class="text-center py-4 text-gray-500">No articles found</td>
            </tr>
          )}
        </tbody>
      </table>
    </div>
  </div>
  
  <!-- Delete confirmation modal -->
  <div id="delete-modal" class="fixed inset-0 z-50 hidden">
    <div class="fixed inset-0 bg-black bg-opacity-50"></div>
    <div class="relative z-10 flex items-center justify-center min-h-screen p-4">
      <div class="bg-white rounded-lg shadow-xl max-w-md w-full p-6">
        <h3 class="text-lg font-bold mb-4">Confirm Delete</h3>
        <p class="mb-6">Are you sure you want to delete this article? This action cannot be undone.</p>
        <div class="flex justify-end space-x-3">
          <button id="cancel-delete" class="btn btn-secondary">Cancel</button>
          <button id="confirm-delete" class="btn btn-danger">Delete</button>
        </div>
      </div>
    </div>
  </div>
  
  <script>
    // Filter and sort functionality
    document.addEventListener('DOMContentLoaded', () => {
      const statusFilter = document.getElementById('status-filter');
      const sortBy = document.getElementById('sort-by');
      const applyFilters = document.getElementById('apply-filters');
      
      if (statusFilter && sortBy && applyFilters) {
        applyFilters.addEventListener('click', () => {
          const url = new URL(window.location.href);
          url.searchParams.set('status', statusFilter.value);
          url.searchParams.set('sort', sortBy.value);
          window.location.href = url.toString();
        });
      }
      
      // Delete article functionality
      const deleteButtons = document.querySelectorAll('.delete-article');
      const deleteModal = document.getElementById('delete-modal');
      const cancelDelete = document.getElementById('cancel-delete');
      const confirmDelete = document.getElementById('confirm-delete');
      
      let articleToDelete = null;
      
      deleteButtons.forEach(button => {
        button.addEventListener('click', () => {
          articleToDelete = button.dataset.id;
          if (deleteModal) deleteModal.classList.remove('hidden');
        });
      });
      
      if (cancelDelete) {
        cancelDelete.addEventListener('click', () => {
          articleToDelete = null;
          if (deleteModal) deleteModal.classList.add('hidden');
        });
      }
      
      if (confirmDelete) {
        confirmDelete.addEventListener('click', async () => {
          if (!articleToDelete) return;
          
          try {
            const response = await fetch(`/api/articles/${articleToDelete}`, {
              method: 'DELETE',
            });
            
            if (response.ok) {
              window.location.reload();
            } else {
              const data = await response.json();
              alert(data.message || 'Failed to delete article');
            }
          } catch (error) {
            console.error('Error deleting article:', error);
            alert('An unexpected error occurred');
          } finally {
            if (deleteModal) deleteModal.classList.add('hidden');
          }
        });
      }
    });
  </script>
</AdminLayout>