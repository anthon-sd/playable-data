---
import AdminLayout from '../../../../layouts/AdminLayout.astro';
import { getArticleById, updateArticle } from '../../../../utils/supabase';
import { marked } from 'marked';
import RichTextEditor from '../../../../components/RichTextEditor.astro';
import MediaLibrary from '../../../../components/MediaLibrary.astro';

export const prerender = true;

// Get article ID from URL
const { id } = Astro.params;

// Fetch article data
let article = null;
let errorMessage = '';
let successMessage = '';

try {
  article = await getArticleById(id);
} catch (error) {
  console.error('Error fetching article:', error);
  errorMessage = error.message || 'Failed to load article';
}

// Handle form submission
if (Astro.request.method === 'POST') {
  try {
    const formData = await Astro.request.formData();
    
    // Extract form data
    const title = formData.get('title')?.toString() || '';
    const content = formData.get('content')?.toString() || '';
    const description = formData.get('description')?.toString() || '';
    const coverImage = formData.get('coverImage')?.toString() || '';
    const tags = formData.get('tags')?.toString() || '';
    const status = formData.get('status')?.toString() || 'draft';
    
    // Create update object
    const updates = {
      title,
      content,
      description,
      cover_image: coverImage,
      tags: tags.split(',').map(tag => tag.trim()).filter(Boolean),
      status,
      updated_at: new Date().toISOString()
    };
    
    // Update article
    const response = await fetch(`/api/articles/${id}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(updates)
    });
    
    if (response.ok) {
      article = await response.json();
      successMessage = 'Article updated successfully!';
      
      // Sync to content file if published
      if (status === 'published') {
        try {
          const syncResponse = await fetch(`/api/content/export/${article.slug}`, {
            method: 'POST'
          });
          
          if (syncResponse.ok) {
            successMessage += ' Content file updated.';
          }
        } catch (syncError) {
          console.error('Error syncing to content file:', syncError);
        }
      }
    } else {
      const data = await response.json();
      errorMessage = data.message || 'Failed to update article';
    }
  } catch (error) {
    console.error('Error updating article:', error);
    errorMessage = 'An unexpected error occurred';
  }
}

// Parse markdown for preview
const htmlContent = article?.content ? marked.parse(article.content) : '';
---

<AdminLayout title="Edit Article" prerender={true}>
  <div class="mb-6">
    <a href="/admin/articles" class="text-blue-500 hover:text-blue-600 flex items-center">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
      </svg>
      Back to Articles
    </a>
  </div>
  
  {errorMessage && (
    <div class="alert alert-danger mb-6">
      {errorMessage}
    </div>
  )}
  
  {successMessage && (
    <div class="alert alert-success mb-6">
      {successMessage}
    </div>
  )}
  
  {article ? (
    <div class="card">
      <div class="card-header">
        <h2 class="text-lg font-semibold">Edit Article</h2>
      </div>
      
      <form method="POST" class="card-body">
        <div class="grid grid-cols-1 gap-6">
          <div>
            <label for="title" class="block text-sm font-medium text-gray-700 mb-1">Title *</label>
            <input type="text" id="title" name="title" value={article.title} required class="form-input" />
          </div>
          
          <div>
            <label for="description" class="block text-sm font-medium text-gray-700 mb-1">Description</label>
            <textarea id="description" name="description" rows="2" class="form-textarea">{article.description}</textarea>
            <p class="text-sm text-gray-500 mt-1">A brief summary of the article</p>
          </div>
          
          <div>
            <label for="coverImage" class="block text-sm font-medium text-gray-700 mb-1">Cover Image URL</label>
            <MediaLibrary 
              id="coverImage"
              name="coverImage"
              value={article.cover_image}
              helpText="Select or enter the URL for the cover image"
            />
          </div>
          
          <div>
            <label for="tags" class="block text-sm font-medium text-gray-700 mb-1">Tags</label>
            <input type="text" id="tags" name="tags" value={article.tags?.join(', ')} class="form-input" />
            <p class="text-sm text-gray-500 mt-1">Comma-separated list of tags</p>
          </div>
          
          <div>
            <label for="content" class="block text-sm font-medium text-gray-700 mb-1">Content *</label>
            <RichTextEditor 
              id="content"
              name="content"
              value={article.content}
              rows="20"
              required={true}
            />
          </div>
          
          <div>
            <label for="status" class="block text-sm font-medium text-gray-700 mb-1">Status</label>
            <select id="status" name="status" class="form-select">
              <option value="draft" selected={article.status === 'draft'}>Draft</option>
              <option value="published" selected={article.status === 'published'}>Published</option>
            </select>
            <p class="text-sm text-gray-500 mt-1">
              Publishing an article will automatically update the corresponding content file.
            </p>
          </div>
          
          <div class="flex justify-between space-x-3">
            <a href={`/blog/${article.slug}`} target="_blank" class="btn btn-secondary">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
              </svg>
              View Article
            </a>
            
            <div class="flex space-x-3">
              <button type="button" id="delete-button" class="btn btn-danger">Delete Article</button>
              <button type="submit" class="btn btn-primary">Update Article</button>
            </div>
          </div>
        </div>
      </form>
    </div>
  ) : (
    <div class="card p-8 text-center">
      <p class="text-gray-500">Loading article...</p>
    </div>
  )}
  
  <!-- Delete confirmation modal -->
  <div id="delete-modal" class="fixed inset-0 z-50 hidden">
    <div class="fixed inset-0 bg-black bg-opacity-50"></div>
    <div class="relative z-10 flex items-center justify-center min-h-screen p-4">
      <div class="bg-white rounded-lg shadow-xl max-w-md w-full p-6">
        <h3 class="text-lg font-bold mb-4">Confirm Delete</h3>
        <p class="mb-6">Are you sure you want to delete this article? This action cannot be undone.</p>
        <div class="flex justify-end space-x-3">
          <button id="cancel-delete" class="btn btn-secondary">Cancel</button>
          <button id="confirm-delete" class="btn btn-danger">Delete</button>
        </div>
      </div>
    </div>
  </div>
  
  <script>
    // Delete functionality
    document.addEventListener('DOMContentLoaded', () => {
      const deleteButton = document.getElementById('delete-button');
      const deleteModal = document.getElementById('delete-modal');
      const cancelDelete = document.getElementById('cancel-delete');
      const confirmDelete = document.getElementById('confirm-delete');
      
      if (deleteButton && deleteModal) {
        deleteButton.addEventListener('click', () => {
          deleteModal.classList.remove('hidden');
        });
      }
      
      if (cancelDelete && deleteModal) {
        cancelDelete.addEventListener('click', () => {
          deleteModal.classList.add('hidden');
        });
      }
      
      if (confirmDelete) {
        confirmDelete.addEventListener('click', async () => {
          try {
            const articleId = window.location.pathname.split('/').pop();
            const response = await fetch(`/api/articles/${articleId}`, {
              method: 'DELETE'
            });
            
            if (response.ok) {
              window.location.href = '/admin/articles';
            } else {
              const data = await response.json();
              alert(data.message || 'Failed to delete article');
            }
          } catch (error) {
            console.error('Error deleting article:', error);
            alert('An unexpected error occurred');
          }
        });
      }
    });
  </script>
</AdminLayout>