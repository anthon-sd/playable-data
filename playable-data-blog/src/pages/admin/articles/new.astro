---
import AdminLayout from '../../../layouts/AdminLayout.astro';
import { getCurrentUser } from '../../../utils/supabase';
import slugify from 'slugify';
import RichTextEditor from '../../../components/RichTextEditor.astro';
import MediaLibrary from '../../../components/MediaLibrary.astro';

// Get current user
const user = await getCurrentUser();

// Handle form submission
let errorMessage = '';
let successMessage = '';

if (Astro.request.method === 'POST') {
  try {
    const formData = await Astro.request.formData();
    
    // Extract form data
    const title = formData.get('title')?.toString() || '';
    const content = formData.get('content')?.toString() || '';
    const description = formData.get('description')?.toString() || '';
    const coverImage = formData.get('coverImage')?.toString() || '';
    const tags = formData.get('tags')?.toString() || '';
    const status = formData.get('status')?.toString() || 'draft';
    
    // Generate slug from title
    const slug = slugify(title, { lower: true, strict: true });
    
    // Create article object
    const article = {
      title,
      content,
      description,
      cover_image: coverImage,
      tags: tags.split(',').map(tag => tag.trim()).filter(Boolean),
      status,
      slug,
      author_id: user?.id,
      author_name: user?.user_metadata?. full_name || user?.email?.split('@')[0],
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    };
    
    // Save to database
    const response = await fetch('/api/articles', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(article)
    });
    
    if (response.ok) {
      const data = await response.json();
      successMessage = 'Article created successfully!';
      
      // Sync to content file if published
      if (status === 'published') {
        try {
          const syncResponse = await fetch(`/api/content/export/${slug}`, {
            method: 'POST'
          });
          
          if (syncResponse.ok) {
            successMessage += ' Content file created.';
          }
        } catch (syncError) {
          console.error('Error syncing to content file:', syncError);
        }
      }
      
      // Redirect to edit page after a short delay
      setTimeout(() => {
        window.location.href = `/admin/articles/edit/${data.id}/`;
      }, 1500);
    } else {
      const data = await response.json();
      errorMessage = data.message || 'Failed to create article';
    }
  } catch (error) {
    console.error('Error creating article:', error);
    errorMessage = 'An unexpected error occurred';
  }
}
---

<AdminLayout title="Create New Article">
  <div class="mb-6">
    <a href="/admin/articles/" class="text-blue-500 hover:text-blue-600 flex items-center">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
      </svg>
      Back to Articles
    </a>
  </div>
  
  {errorMessage && (
    <div class="alert alert-danger mb-6">
      {errorMessage}
    </div>
  )}
  
  {successMessage && (
    <div class="alert alert-success mb-6">
      {successMessage}
    </div>
  )}
  
  <div class="card">
    <div class="card-header">
      <h2 class="text-lg font-semibold">Create New Article</h2>
    </div>
    
    <form method="POST" class="card-body">
      <div class="grid grid-cols-1 gap-6">
        <div>
          <label for="title" class="block text-sm font-medium text-gray-700 mb-1">Title *</label>
          <input type="text" id="title" name="title" required class="form-input" />
        </div>
        
        <div>
          <label for="description" class="block text-sm font-medium text-gray-700 mb-1">Description</label>
          <textarea id="description" name="description" rows="2" class="form-textarea"></textarea>
          <p class="text-sm text-gray-500 mt-1">A brief summary of the article</p>
        </div>
        
        <div>
          <label for="coverImage" class="block text-sm font-medium text-gray-700 mb-1">Cover Image URL</label>
          <MediaLibrary 
            id="coverImage"
            name="coverImage"
            helpText="Select or enter the URL for the cover image"
          />
        </div>
        
        <div>
          <label for="tags" class="block text-sm font-medium text-gray-700 mb-1">Tags</label>
          <input type="text" id="tags" name="tags" class="form-input" />
          <p class="text-sm text-gray-500 mt-1">Comma-separated list of tags</p>
        </div>
        
        <div>
          <label for="content" class="block text-sm font-medium text-gray-700 mb-1">Content *</label>
          <RichTextEditor 
            id="content"
            name="content"
            rows="20"
            required={true}
          />
        </div>
        
        <div>
          <label for="status" class="block text-sm font-medium text-gray-700 mb-1">Status</label>
          <select id="status" name="status" class="form-select">
            <option value="draft">Draft</option>
            <option value="published">Published</option>
          </select>
          <p class="text-sm text-gray-500 mt-1">
            Publishing an article will automatically create a content file.
          </p>
        </div>
        
        <div class="flex justify-end space-x-3">
          <a href="/admin/articles/" class="btn btn-secondary">Cancel</a>
          <button type="submit" class="btn btn-primary">Create Article</button>
        </div>
      </div>
    </form>
  </div>
</AdminLayout>