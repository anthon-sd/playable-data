---
/**
 * Media Library Component
 * A reusable component for selecting media from the library
 */

interface Props {
  id?: string;
  name?: string;
  value?: string;
  label?: string;
  required?: boolean;
  helpText?: string;
}

const {
  id = 'media',
  name = 'media',
  value = '',
  label = 'Select Media',
  required = false,
  helpText = 'Select an image from the media library'
} = Astro.props;

// In a real implementation, this would fetch media from Supabase storage
const mediaItems = [
  {
    id: '1',
    name: 'sample-image-1.jpg',
    url: 'https://images.unsplash.com/photo-1519389950473-47ba0277781c',
    type: 'image',
    size: '256 KB',
    uploaded: '2025-02-25'
  },
  {
    id: '2',
    name: 'sample-image-2.jpg',
    url: 'https://images.unsplash.com/photo-1451187580459-43490279c0fa',
    type: 'image',
    size: '512 KB',
    uploaded: '2025-02-24'
  },
  {
    id: '3',
    name: 'sample-image-3.jpg',
    url: 'https://images.unsplash.com/photo-1563986768609-322da13575f3',
    type: 'image',
    size: '384 KB',
    uploaded: '2025-02-23'
  },
  {
    id: '4',
    name: 'sample-image-4.jpg',
    url: 'https://images.unsplash.com/photo-1544197150-b99a580bb7a8',
    type: 'image',
    size: '512 KB',
    uploaded: '2025-02-22'
  }
];
---

<div class="media-library">
  <label for={id} class="block text-sm font-medium text-gray-700 mb-1">
    {label} {required && <span class="text-red-500">*</span>}
  </label>
  
  <div class="flex items-center space-x-2">
    <input 
      type="text" 
      id={id} 
      name={name} 
      value={value} 
      required={required} 
      class="form-input flex-grow" 
      readonly 
    />
    <button 
      type="button" 
      class="btn btn-secondary media-library-button"
      aria-label="Open media library"
    >
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
      </svg>
    </button>
  </div>
  
  {helpText && <p class="text-sm text-gray-500 mt-1">{helpText}</p>}
  
  {value && (
    <div class="mt-2 relative">
      <img src={value} alt="Selected media" class="h-32 w-auto object-cover rounded-md" />
      <button 
        type="button" 
        class="absolute top-2 right-2 bg-red-500 text-white rounded-full p-1 hover:bg-red-600 clear-media-button"
        aria-label="Clear selected media"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
    </div>
  )}
  
  <!-- Media Library Modal -->
  <div class="media-library-modal fixed inset-0 z-50 hidden">
    <div class="fixed inset-0 bg-black bg-opacity-50"></div>
    <div class="relative z-10 flex items-center justify-center min-h-screen p-4">
      <div class="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[80vh] flex flex-col">
        <div class="flex items-center justify-between p-4 border-b">
          <h3 class="text-lg font-bold">Media Library</h3>
          <button type="button" class="text-gray-500 hover:text-gray-700 close-modal">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
        
        <div class="p-4 border-b">
          <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between space-y-2 sm:space-y-0">
            <input type="text" placeholder="Search media..." class="form-input sm:w-64" />
            <a href="/admin/media/upload" target="_blank" class="btn btn-primary">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0l-4 4m4-4v12" />
              </svg>
              Upload New
            </a>
          </div>
        </div>
        
        <div class="flex-1 overflow-y-auto p-4">
          <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4">
            {mediaItems.map(item => (
              <div class="media-item border rounded-lg overflow-hidden bg-white cursor-pointer hover:border-blue-500 transition" data-url={item.url}>
                <div class="h-32 bg-gray-100 flex items-center justify-center">
                  <img src={item.url} alt={item.name} class="h-full w-full object-cover" />
                </div>
                <div class="p-2">
                  <p class="text-sm font-medium text-gray-900 truncate" title={item.name}>{item.name}</p>
                  <p class="text-xs text-gray-500">{item.size}</p>
                </div>
              </div>
            ))}
          </div>
        </div>
        
        <div class="p-4 border-t flex justify-end">
          <button type="button" class="btn btn-secondary mr-2 close-modal">Cancel</button>
          <button type="button" class="btn btn-primary select-media" disabled>Select</button>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const mediaLibraries = document.querySelectorAll('.media-library');
    
    mediaLibraries.forEach(library => {
      const input = library.querySelector('input');
      const openButton = library.querySelector('.media-library-button');
      const clearButton = library.querySelector('.clear-media-button');
      const modal = library.querySelector('.media-library-modal');
      const closeButtons = library.querySelectorAll('.close-modal');
      const selectButton = library.querySelector('.select-media');
      const mediaItems = library.querySelectorAll('.media-item');
      
      let selectedUrl = '';
      
      // Open modal
      if (openButton && modal) {
        openButton.addEventListener('click', () => {
          modal.classList.remove('hidden');
          document.body.style.overflow = 'hidden';
          
          // Reset selection
          selectedUrl = '';
          selectButton.disabled = true;
          mediaItems.forEach(item => {
            item.classList.remove('border-blue-500', 'ring-2', 'ring-blue-500');
          });
        });
      }
      
      // Close modal
      if (closeButtons && modal) {
        closeButtons.forEach(button => {
          button.addEventListener('click', () => {
            modal.classList.add('hidden');
            document.body.style.overflow = '';
          });
        });
      }
      
      // Select media item
      if (mediaItems) {
        mediaItems.forEach(item => {
          item.addEventListener('click', () => {
            // Remove selection from all items
            mediaItems.forEach(i => {
              i.classList.remove('border-blue-500', 'ring-2', 'ring-blue-500');
            });
            
            // Add selection to clicked item
            item.classList.add('border-blue-500', 'ring-2', 'ring-blue-500');
            
            // Update selected URL
            selectedUrl = item.dataset.url;
            
            // Enable select button
            if (selectButton) {
              selectButton.disabled = false;
            }
          });
        });
      }
      
      // Select button
      if (selectButton && input && modal) {
        selectButton.addEventListener('click', () => {
          if (selectedUrl) {
            input.value = selectedUrl;
            
            // Update preview image if it exists
            const previewContainer = library.querySelector('.mt-2.relative');
            if (previewContainer) {
              const previewImage = previewContainer.querySelector('img');
              previewImage.src = selectedUrl;
            } else {
              // Create preview image if it doesn't exist
              const previewDiv = document.createElement('div');
              previewDiv.className = 'mt-2 relative';
              previewDiv.innerHTML = `
                <img src="${selectedUrl}" alt="Selected media" class="h-32 w-auto object-cover rounded-md" />
                <button 
                  type="button" 
                  class="absolute top-2 right-2 bg-red-500 text-white rounded-full p-1 hover:bg-red-600 clear-media-button"
                  aria-label="Clear selected media"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              `;
              library.appendChild(previewDiv);
              
              // Add event listener to new clear button
              const newClearButton = previewDiv.querySelector('.clear-media-button');
              if (newClearButton) {
                newClearButton.addEventListener('click', () => {
                  input.value = '';
                  previewDiv.remove();
                });
              }
            }
            
            // Close modal
            modal.classList.add('hidden');
            document.body.style.overflow = '';
          }
        });
      }
      
      // Clear button
      if (clearButton && input) {
        clearButton.addEventListener('click', () => {
          input.value = '';
          clearButton.closest('.mt-2.relative').remove();
        });
      }
    });
  });
</script>

<style>
  .media-item.selected {
    @apply border-blue-500 ring-2 ring-blue-500;
  }
</style>