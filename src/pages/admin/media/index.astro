---
import AdminLayout from '../../../layouts/AdminLayout.astro';

// In a real implementation, this would fetch media from Supabase storage
const mediaItems = [
  {
    id: '1',
    name: 'sample-image-1.jpg',
    url: 'https://images.unsplash.com/photo-1519389950473-47ba0277781c',
    type: 'image',
    size: '256 KB',
    uploaded: '2025-02-25'
  },
  {
    id: '2',
    name: 'sample-image-2.jpg',
    url: 'https://images.unsplash.com/photo-1451187580459-43490279c0fa',
    type: 'image',
    size: '512 KB',
    uploaded: '2025-02-24'
  },
  {
    id: '3',
    name: 'sample-document.pdf',
    url: '#',
    type: 'document',
    size: '1.2 MB',
    uploaded: '2025-02-23'
  }
];
---

<AdminLayout title="Media Library">
  <div class="flex justify-between items-center mb-6">
    <h2 class="text-xl font-bold">Media Library</h2>
    <a href="/admin/media/upload/" class="btn btn-primary">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0l-4 4m4-4v12" />
      </svg>
      Upload Media
    </a>
  </div>
  
  <div class="card">
    <div class="card-header">
      <div class="flex flex-col sm:flex-row sm:justify-between sm:items-center space-y-4 sm:space-y-0">
        <h3 class="text-lg font-semibold">All Media</h3>
        
        <div class="flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-2">
          <select id="type-filter" class="form-select">
            <option value="all">All Types</option>
            <option value="image">Images</option>
            <option value="document">Documents</option>
            <option value="video">Videos</option>
          </select>
          
          <button id="apply-filters" class="btn btn-secondary">Apply</button>
        </div>
      </div>
    </div>
    
    <div class="p-4">
      <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
        {mediaItems.map(item => (
          <div class="media-item border rounded-lg overflow-hidden bg-white">
            <div class="h-40 bg-gray-100 flex items-center justify-center">
              {item.type === 'image' ? (
                <img src={item.url} alt={item.name} class="h-full w-full object-cover" />
              ) : (
                <div class="text-gray-400">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                  </svg>
                </div>
              )}
            </div>
            <div class="p-3">
              <p class="font-medium text-gray-900 truncate" title={item.name}>{item.name}</p>
              <p class="text-sm text-gray-500">{item.size} â€¢ {item.uploaded}</p>
              <div class="flex mt-2 space-x-2">
                <button class="text-blue-500 hover:text-blue-600 text-sm copy-url" data-url={item.url}>
                  Copy URL
                </button>
                <button class="text-red-500 hover:text-red-600 text-sm delete-media" data-id={item.id}>
                  Delete
                </button>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  </div>
  
  <!-- Delete confirmation modal -->
  <div id="delete-modal" class="fixed inset-0 z-50 hidden">
    <div class="fixed inset-0 bg-black bg-opacity-50"></div>
    <div class="relative z-10 flex items-center justify-center min-h-screen p-4">
      <div class="bg-white rounded-lg shadow-xl max-w-md w-full p-6">
        <h3 class="text-lg font-bold mb-4">Confirm Delete</h3>
        <p class="mb-6">Are you sure you want to delete this media file? This action cannot be undone.</p>
        <div class="flex justify-end space-x-3">
          <button id="cancel-delete" class="btn btn-secondary">Cancel</button>
          <button id="confirm-delete" class="btn btn-danger">Delete</button>
        </div>
      </div>
    </div>
  </div>
  
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      // Filter functionality
      const typeFilter = document.getElementById('type-filter');
      const applyFilters = document.getElementById('apply-filters');
      
      if (typeFilter && applyFilters) {
        applyFilters.addEventListener('click', () => {
          const type = typeFilter.value;
          
          document.querySelectorAll('.media-item').forEach(item => {
            const itemType = item.querySelector('p.text-sm').textContent.includes('image') ? 'image' : 'document';
            
            if (type === 'all' || itemType === type) {
              item.style.display = '';
            } else {
              item.style.display = 'none';
            }
          });
        });
      }
      
      // Copy URL functionality
      document.querySelectorAll('.copy-url').forEach(button => {
        button.addEventListener('click', () => {
          const url = button.dataset.url;
          navigator.clipboard.writeText(url).then(() => {
            const originalText = button.textContent;
            button.textContent = 'Copied!';
            setTimeout(() => {
              button.textContent = originalText;
            }, 2000);
          });
        });
      });
      
      // Delete functionality
      const deleteButtons = document.querySelectorAll('.delete-media');
      const deleteModal = document.getElementById('delete-modal');
      const cancelDelete = document.getElementById('cancel-delete');
      const confirmDelete = document.getElementById('confirm-delete');
      
      let mediaToDelete = null;
      
      deleteButtons.forEach(button => {
        button.addEventListener('click', () => {
          mediaToDelete = button.dataset.id;
          if (deleteModal) deleteModal.classList.remove('hidden');
        });
      });
      
      if (cancelDelete) {
        cancelDelete.addEventListener('click', () => {
          mediaToDelete = null;
          if (deleteModal) deleteModal.classList.add('hidden');
        });
      }
      
      if (confirmDelete) {
        confirmDelete.addEventListener('click', async () => {
          if (!mediaToDelete) return;
          
          try {
            // In a real implementation, this would call an API endpoint
            alert(`Media with ID ${mediaToDelete} would be deleted in production.`);
            
            // Remove the media item from the UI
            const mediaItem = document.querySelector(`.delete-media[data-id="${mediaToDelete}"]`).closest('.media-item');
            if (mediaItem) {
              mediaItem.remove();
            }
            
            if (deleteModal) deleteModal.classList.add('hidden');
          } catch (error) {
            console.error('Error deleting media:', error);
            alert('An unexpected error occurred');
          }
        });
      }
    });
  </script>
</AdminLayout>