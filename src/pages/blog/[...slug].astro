---
import Layout from '../../layouts/Layout.astro';
import BlogPost from '../../layouts/BlogPost.astro';
import { getArticles, getArticleById } from '../../utils/supabase';
import { getContent } from '../../utils/storage';
import { marked } from 'marked';

export async function getStaticPaths() {
  try {
    // Get all articles from database
    const articles = await getArticles();
    
    return articles.map(article => ({
      params: { slug: article.slug },
      props: { article },
    }));
  } catch (error) {
    console.error("Error generating static paths:", error);
    // Return a placeholder path to prevent build failures
    return [
      {
        params: { slug: 'placeholder' },
        props: { 
          article: {
            slug: 'placeholder',
            title: 'Welcome to Playable Data Blog',
            description: 'This is a placeholder article while we set up our content.',
            content: '# Welcome to Playable Data Blog\n\nWe\'re currently setting up our content. Please check back soon for articles on gaming analytics, data science, and more!',
            created_at: new Date().toISOString(),
            tags: ['welcome']
          } 
        }
      }
    ];
  }
}

const { slug } = Astro.params;
let { article: initialArticle } = Astro.props;

// Try to get the article from storage first, then fall back to database
let article = initialArticle;
let content = article?.content || '';

// Only try to get content from storage if not using the placeholder and not in SSR
if (slug !== 'placeholder' && !import.meta.env.SSR) {
  try {
    // Try to get from storage
    const storageContent = await getContent(slug);
    if (storageContent) {
      content = storageContent.content;
    }
  } catch (error) {
    console.log('Content not found in storage, using database content');
  }
}

// Parse markdown content
const htmlContent = marked.parse(content);
---

<BlogPost post={{
  slug: article.slug,
  data: {
    title: article.title,
    description: article.description,
    pubDate: new Date(article.created_at),
    updatedDate: article.updated_at ? new Date(article.updated_at) : undefined,
    coverImage: article.cover_image,
    author: {
      name: article.author_name,
      image: article.author_image
    },
    tags: article.tags
  },
  body: content
}}>
  <div set:html={htmlContent} />
</BlogPost>